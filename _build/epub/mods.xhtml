<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Modules</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="modules">
<h1>Modules</h1>
<section id="emu">
<span id="id1"></span><h2>emu</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">emu</span></code> module contains general emulator functions.</p>
<ul class="simple">
<li><p><a class="reference internal" href="#frameadvance"><span class="std std-ref">frameadvance</span></a></p></li>
<li><p><a class="reference internal" href="#gamecode"><span class="std std-ref">gamecode</span></a></p></li>
<li><p><a class="reference internal" href="#smallgamecode"><span class="std std-ref">smallgamecode</span></a></p></li>
<li><p><a class="reference internal" href="#speedmode"><span class="std std-ref">speedmode</span></a></p></li>
<li><p><a class="reference internal" href="#wait"><span class="std std-ref">wait</span></a></p></li>
<li><p><a class="reference internal" href="#pause"><span class="std std-ref">pause</span></a></p></li>
<li><p><a class="reference internal" href="#pause"><span class="std std-ref">unpause</span></a></p></li>
<li><p><a class="reference internal" href="#emulateframe"><span class="std std-ref">emulateframe</span></a></p></li>
<li><p><a class="reference internal" href="#emulateframefastnoskipping"><span class="std std-ref">emulateframefastnoskipping</span></a></p></li>
<li><p><a class="reference internal" href="#emulateframefast"><span class="std std-ref">emulateframefast</span></a></p></li>
<li><p><a class="reference internal" href="#emulateframeinvisible"><span class="std std-ref">emulateframeinvisible</span></a></p></li>
<li><p><a class="reference internal" href="#redraw"><span class="std std-ref">redraw</span></a></p></li>
<li><p><a class="reference internal" href="#getframecount"><span class="std std-ref">getframecount</span></a></p></li>
<li><p><a class="reference internal" href="#getlagcount"><span class="std std-ref">getlagcount</span></a></p></li>
<li><p><a class="reference internal" href="#lagged"><span class="std std-ref">lagged</span></a></p></li>
<li><p><a class="reference internal" href="#emulating"><span class="std std-ref">emulating</span></a></p></li>
<li><p><a class="reference internal" href="#atframeboundary"><span class="std std-ref">atframeboundary</span></a></p></li>
<li><p><a class="reference internal" href="#registerbefore"><span class="std std-ref">registerbefore</span></a></p></li>
<li><p><a class="reference internal" href="#registerafter"><span class="std std-ref">registerafter</span></a></p></li>
<li><p><a class="reference internal" href="#registerstart"><span class="std std-ref">registerstart</span></a></p></li>
<li><p><a class="reference internal" href="#registerexit"><span class="std std-ref">registerexit</span></a></p></li>
<li><p><a class="reference internal" href="#persistglobalvariables"><span class="std std-ref">persistglobalvariables</span></a></p></li>
<li><p><a class="reference internal" href="#message"><span class="std std-ref">message</span></a></p></li>
<li><p><a class="reference internal" href="#print"><span class="std std-ref">print</span></a></p></li>
<li><p><a class="reference internal" href="#openscript"><span class="std std-ref">openscript</span></a></p></li>
<li><p><a class="reference internal" href="#reset"><span class="std std-ref">reset</span></a></p></li>
<li><p><a class="reference internal" href="#addmenu"><span class="std std-ref">addmenu</span></a></p></li>
<li><p><a class="reference internal" href="#setmenuiteminfo"><span class="std std-ref">setmenuiteminfo</span></a></p></li>
<li><p><a class="reference internal" href="#registermenustart"><span class="std std-ref">registermenustart</span></a></p></li>
<li><p><a class="reference internal" href="#register3devent"><span class="std std-ref">register3devent</span></a></p></li>
<li><p><a class="reference internal" href="#set3dtransform"><span class="std std-ref">set3dtransform</span></a></p></li>
</ul>
<section id="emu-frameadvance">
<span id="frameadvance"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.frameadvance()</span></code></h3>
<p>Steps emulation one frame. Can be used when overriding the main emulation loop.</p>
</section>
<section id="emu-gamecode">
<span id="gamecode"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.gamecode()</span></code></h3>
<p>Retrieves the full game code of the currently loaded ROM as a string.</p>
</section>
<section id="emu-smallgamecode">
<span id="smallgamecode"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.smallgamecode()</span></code></h3>
<p>Retrieves the game code excluding the region code of the currently loaded ROM as a string.</p>
</section>
<section id="emu-speedmode-mode">
<span id="speedmode"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.speedmode(mode)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">mode</span></code> is a string with a value of any of {<code class="docutils literal notranslate"><span class="pre">normal</span></code>, <code class="docutils literal notranslate"><span class="pre">nothrottle</span></code>, <code class="docutils literal notranslate"><span class="pre">turbo</span></code>, <code class="docutils literal notranslate"><span class="pre">maximum</span></code>}.</p>
<p>Sets the emulation speed when using <code class="docutils literal notranslate"><span class="pre">emu.frameadvance</span></code>.</p>
</section>
<section id="emu-wait">
<span id="wait"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.wait()</span></code></h3>
<p>Tells the emulator to wait while the script does calculations. Note that hotkeys are not disabled, so e.g. a savestate could still be loaded while the emulator is waiting.</p>
</section>
<section id="emu-pause">
<span id="pause"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.pause()</span></code></h3>
<p>Pauses emulation.</p>
</section>
<section id="emu-unpause">
<span id="unpause"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.unpause()</span></code></h3>
<p>Unpauses emulation.</p>
</section>
<section id="emu-emulateframe">
<span id="emulateframe"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.emulateframe()</span></code></h3>
<p>Steps one frame. Equivalent to:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="n">emu</span><span class="p">.</span><span class="n">setspeed</span><span class="p">(</span><span class="s2">&quot;normal&quot;</span><span class="p">)</span>
<span class="n">emu</span><span class="p">.</span><span class="n">frameadvance</span><span class="p">()</span>
</pre></div>
</div>
</section>
<section id="emu-emulateframefastnoskipping">
<span id="emulateframefastnoskipping"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.emulateframefastnoskipping()</span></code></h3>
<p>Fast-forwards emulation once but render every frame. Equivalent to:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="n">emu</span><span class="p">.</span><span class="n">setspeed</span><span class="p">(</span><span class="s2">&quot;nothrottle&quot;</span><span class="p">)</span>
<span class="n">emu</span><span class="p">.</span><span class="n">frameadvance</span><span class="p">()</span>
</pre></div>
</div>
</section>
<section id="emu-emulateframefast">
<span id="emulateframefast"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.emulateframefast()</span></code></h3>
<p>Fast-forwards emulation once. Equivalent to:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="n">emu</span><span class="p">.</span><span class="n">setspeed</span><span class="p">(</span><span class="s2">&quot;turbo&quot;</span><span class="p">)</span>
<span class="n">emu</span><span class="p">.</span><span class="n">frameadvance</span><span class="p">()</span>
</pre></div>
</div>
</section>
<section id="emu-emulateframeinvisible">
<span id="emulateframeinvisible"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.emulateframeinvisible()</span></code></h3>
<p>Extremely-fast-forwards emulation once. Equivalent to:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="n">emu</span><span class="p">.</span><span class="n">setspeed</span><span class="p">(</span><span class="s2">&quot;maximum&quot;</span><span class="p">)</span>
<span class="n">emu</span><span class="p">.</span><span class="n">frameadvance</span><span class="p">()</span>
</pre></div>
</div>
</section>
<section id="emu-redraw">
<span id="redraw"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.redraw()</span></code></h3>
<p>Redraws the current frame.</p>
</section>
<section id="emu-getframecount">
<span id="getframecount"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.getframecount()</span></code></h3>
<p>Gets the current frame count as an integer.</p>
</section>
<section id="emu-getlagcount">
<span id="getlagcount"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.getlagcount()</span></code></h3>
<p>Gets the current total lag frames as an integer.</p>
</section>
<section id="emu-lagged">
<span id="lagged"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.lagged()</span></code></h3>
<p>Returns true if the current frame is a lag frame.</p>
</section>
<section id="emu-emulating">
<span id="emulating"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.emulating()</span></code></h3>
<p>Returns true if the emulator is currently running.</p>
</section>
<section id="emu-atframeboundary">
<span id="atframeboundary"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.atframeboundary()</span></code></h3>
<p>Returns true if the emulator is at a frame boundary.</p>
</section>
<section id="emu-registerbefore-func">
<span id="registerbefore"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.registerbefore(func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking no arguments.</p>
<p>Sets up a callback function to run before every frame starts. Can be used to e.g. set up memory or controller inputs for the next frame.</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="kr">function</span> <span class="nf">myCallback</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Frame starting&quot;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="n">emu</span><span class="p">.</span><span class="n">registerbefore</span><span class="p">(</span><span class="n">myCallback</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="emu-registerafter-func">
<span id="registerafter"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.registerafter(func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking no arguments.</p>
<p>Sets up a callback function to run after every frame ends. Can be used to e.g. read out memory or controller dataa for the previous frame.</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="kr">function</span> <span class="nf">myCallback</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Frame ending&quot;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="n">emu</span><span class="p">.</span><span class="n">registerafter</span><span class="p">(</span><span class="n">myCallback</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="emu-registerstart-func">
<span id="registerstart"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.registerstart(func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking no arguments.</p>
<p>Sets up a callback function to run on script start or reset. Does not work correctly with script start.</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="kr">function</span> <span class="nf">myCallback</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">emu</span><span class="p">.</span><span class="n">gamecode</span><span class="p">())</span>
    <span class="n">file</span> <span class="o">=</span> <span class="nb">io.open</span><span class="p">(</span><span class="s2">&quot;log.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;w+&quot;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="n">emu</span><span class="p">.</span><span class="n">registerstart</span><span class="p">(</span><span class="n">myCallback</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="emu-registerexit-func">
<span id="registerexit"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.registerexit(func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking no arguments.</p>
<p>Sets up a callback function to run on script end.</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="kr">function</span> <span class="nf">myCallback</span><span class="p">()</span>
    <span class="n">file</span><span class="p">:</span><span class="n">close</span><span class="p">()</span>
<span class="kr">end</span>

<span class="n">emu</span><span class="p">.</span><span class="n">registerexit</span><span class="p">(</span><span class="n">myCallback</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="emu-persistglobalvariables-variabletable">
<span id="persistglobalvariables"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.persistglobalvariables(variabletable)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">variabletable</span></code> is a table comprising keys and values.</p>
<p>Defines a global variable for each key in <code class="docutils literal notranslate"><span class="pre">variabletable</span></code>. The variables will be set to the values they had the last time the script exited, or the value provided in the table if that is not available.
To set a default value of <code class="docutils literal notranslate"><span class="pre">nil</span></code> for a variable, pass the variable name as a string with no associated value.</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="n">emu</span><span class="p">.</span><span class="n">persistglobalvariables</span><span class="p">({</span>
    <span class="n">variable1</span> <span class="o">=</span> <span class="n">defaultvalue1</span><span class="p">,</span>
    <span class="n">variable2</span> <span class="o">=</span> <span class="n">defaultvalue2</span><span class="p">,</span>
    <span class="c1">-- ...</span>
<span class="p">})</span>
</pre></div>
</div>
</section>
<section id="emu-message-str">
<span id="message"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.message(str)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">str</span></code> is a string with the message to be displayed.</p>
<p>Displays an info message to the user.</p>
</section>
<section id="emu-print">
<span id="print"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.print(...)</span></code></h3>
<p>Replacement for <code class="docutils literal notranslate"><span class="pre">luaB_print()</span></code> that outputs to the appropriate textbox instead of stdout.</p>
</section>
<section id="emu-openscript-filename">
<span id="openscript"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.openscript(filename)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">filename</span></code> is a string containing the filepath of the script to open.</p>
<p>Opens a new Lua script. Only available in the Windows frontend.</p>
</section>
<section id="emu-reset">
<span id="reset"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.reset()</span></code></h3>
<p>Resets the currently loaded ROM.</p>
</section>
<section id="emu-addmenu-menuname-menuentries">
<span id="addmenu"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.addmenu(menuName,</span> <span class="pre">menuEntries)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">menuName</span></code> is a string containing the name the new menu should have. <code class="docutils literal notranslate"><span class="pre">menuEntries</span></code> is a table containing the entries that the menu will have.</p>
<p>TODO: add an example for this.</p>
</section>
<section id="emu-setmenuiteminfo-menuitem-infotable">
<span id="setmenuiteminfo"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.setmenuiteminfo(menuItem,</span> <span class="pre">infoTable)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">menuItem</span></code> is a… actually, I really have no idea.</p>
<p>TODO: work out how the hell this function works</p>
</section>
<section id="emu-registermenustart-func">
<span id="registermenustart"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.registermenustart(func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking ?? arguments.</p>
<p>TODO: literally all of the menu stuff</p>
</section>
<section id="emu-register3devent-func">
<span id="register3devent"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.register3devent(func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking ?? arguments.</p>
<p>TODO: figure out 3D stuff</p>
</section>
<section id="emu-set3dtransform-mode-matrix">
<span id="set3dtransform"></span><h3><code class="docutils literal notranslate"><span class="pre">emu.set3dtransform(mode,</span> <span class="pre">matrix)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">mode</span></code> is a number with a value of either 2 or 3. <code class="docutils literal notranslate"><span class="pre">matrix</span></code> is a camera matrix.</p>
<p>TODO: 3D</p>
</section>
</section>
<section id="gui">
<span id="id2"></span><h2>gui</h2>
</section>
<section id="stylus">
<span id="id3"></span><h2>emu</h2>
</section>
<section id="savestate">
<span id="id4"></span><h2>savestate</h2>
</section>
<section id="memory">
<span id="id5"></span><h2>memory</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">memory</span></code> module contains functions related to game memory.</p>
<ul class="simple">
<li><p><a class="reference internal" href="#readbyte"><span class="std std-ref">readbyte</span></a></p></li>
<li><p><a class="reference internal" href="#readbytesigned"><span class="std std-ref">readbytesigned</span></a></p></li>
<li><p><a class="reference internal" href="#readword"><span class="std std-ref">readword</span></a></p></li>
<li><p><a class="reference internal" href="#readwordsigned"><span class="std std-ref">readwordsigned</span></a></p></li>
<li><p><a class="reference internal" href="#readdword"><span class="std std-ref">readdword</span></a></p></li>
<li><p><a class="reference internal" href="#readdwordsigned"><span class="std std-ref">readdwordsigned</span></a></p></li>
<li><p><a class="reference internal" href="#readbyterange"><span class="std std-ref">readbyterange</span></a></p></li>
<li><p><a class="reference internal" href="#writebyte"><span class="std std-ref">writebyte</span></a></p></li>
<li><p><a class="reference internal" href="#writeword"><span class="std std-ref">writeword</span></a></p></li>
<li><p><a class="reference internal" href="#writedword"><span class="std std-ref">writedword</span></a></p></li>
<li><p><a class="reference internal" href="#isvalid"><span class="std std-ref">isvalid</span></a></p></li>
<li><p><a class="reference internal" href="#getregister"><span class="std std-ref">getregister</span></a></p></li>
<li><p><a class="reference internal" href="#setregister"><span class="std std-ref">setregister</span></a></p></li>
<li><p><a class="reference internal" href="#vram-readword"><span class="std std-ref">vram_readword</span></a></p></li>
<li><p><a class="reference internal" href="#vram-writeword"><span class="std std-ref">vram_writeword</span></a></p></li>
<li><p><a class="reference internal" href="#registerwrite"><span class="std std-ref">registerwrite</span></a></p></li>
<li><p><a class="reference internal" href="#registerread"><span class="std std-ref">registerread</span></a></p></li>
<li><p><a class="reference internal" href="#registerexec"><span class="std std-ref">registerexec</span></a></p></li>
</ul>
<section id="memory-readbyte-address">
<span id="readbyte"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.readbyte(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a byte in the ARM9 CPU’s address space.</p>
<p>Reads one byte from address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-readbytesigned-address">
<span id="readbytesigned"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.readbytesigned(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a signed byte in the ARM9 CPU’s address space.</p>
<p>Reads one signed byte from address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-readword-address">
<span id="readword"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.readword(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a word in the ARM9 CPU’s address space.</p>
<p>Reads one word (16 bits) from address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-readwordsigned-address">
<span id="readwordsigned"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.readwordsigned(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a signed word in the ARM9 CPU’s address space.</p>
<p>Reads one signed word (16 bits) from address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-readdword-address">
<span id="readdword"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.readdword(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a dword in the ARM9 CPU’s address space.</p>
<p>Reads one dword (32 bits) from address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-readdwordsigned-address">
<span id="readdwordsigned"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.readdwordsigned(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a signed dword in the ARM9 CPU’s address space.</p>
<p>Reads one signed dword (32 bits) from address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-readbyterange-address-length">
<span id="readbyterange"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.readbyterange(address,</span> <span class="pre">length)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the start of the block to read. <code class="docutils literal notranslate"><span class="pre">length</span></code> is an integer representing the length of the block to read.</p>
<p>Reads <code class="docutils literal notranslate"><span class="pre">length</span></code> bytes from address <code class="docutils literal notranslate"><span class="pre">address</span></code>. Returns an array.</p>
</section>
<section id="memory-writebyte-address-value">
<span id="writebyte"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.writebyte(address,</span> <span class="pre">value)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a byte in the ARM9 CPU’s address space. <code class="docutils literal notranslate"><span class="pre">value</span></code> is the byte to write there as an integer.</p>
<p>Writes the byte <code class="docutils literal notranslate"><span class="pre">value</span></code> to address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-writeword-address-value">
<span id="writeword"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.writeword(address,</span> <span class="pre">value)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a word in the ARM9 CPU’s address space. <code class="docutils literal notranslate"><span class="pre">value</span></code> is the word to write there as an integer.</p>
<p>Writes the word <code class="docutils literal notranslate"><span class="pre">value</span></code> to address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-writedword-address-value">
<span id="writedword"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.writedword(address,</span> <span class="pre">value)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of a dword in the ARM9 CPU’s address space. <code class="docutils literal notranslate"><span class="pre">value</span></code> is the dword to write there as an integer.</p>
<p>Writes the dword <code class="docutils literal notranslate"><span class="pre">value</span></code> to address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-isvalid-address">
<span id="isvalid"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.isvalid(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing an address in the ARM9 CPU’s address space.</p>
<p>Returns <code class="docutils literal notranslate"><span class="pre">true</span></code> if <code class="docutils literal notranslate"><span class="pre">address</span></code> is a valid hardware address, else <code class="docutils literal notranslate"><span class="pre">false</span></code>.</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="kr">function</span> <span class="nf">getString</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">memory</span><span class="p">.</span><span class="n">isvalid</span><span class="p">(</span><span class="n">address</span><span class="p">)</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="kd">local</span> <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="kd">local</span> <span class="n">c</span> <span class="o">=</span> <span class="n">memory</span><span class="p">.</span><span class="n">readbyte</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
        <span class="kr">while</span> <span class="n">c</span> <span class="o">~=</span> <span class="mi">0</span> <span class="kr">do</span>
            <span class="n">str</span> <span class="o">=</span> <span class="n">str</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">memory</span><span class="p">.</span><span class="n">readbyte</span><span class="p">(</span><span class="n">address</span> <span class="o">+</span> <span class="n">index</span><span class="p">)</span>
            <span class="n">index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="kr">end</span>
        <span class="kr">return</span> <span class="n">str</span>
    <span class="kr">end</span>
    <span class="kr">return</span> <span class="kc">nil</span>
<span class="kr">end</span>
</pre></div>
</div>
</section>
<section id="memory-getregister-cpu-dot-registername-string">
<span id="getregister"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.getregister(cpu_dot_registername_string)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">cpu_dot_registername_string</span></code> is a string representing the register to read. The format is <code class="docutils literal notranslate"><span class="pre">&lt;CPU&gt;.&lt;register&gt;</span></code>, where <code class="docutils literal notranslate"><span class="pre">CPU</span></code> is “arm9” or “arm7” (or “main” or “sub”, respectively) and <code class="docutils literal notranslate"><span class="pre">register</span></code> is <code class="docutils literal notranslate"><span class="pre">r0</span></code>-<code class="docutils literal notranslate"><span class="pre">r15</span></code>, <code class="docutils literal notranslate"><span class="pre">cpsr</span></code> or <code class="docutils literal notranslate"><span class="pre">spsr</span></code>.</p>
<p>Returns the contents of the register referenced by <code class="docutils literal notranslate"><span class="pre">cpu_dot_registername_string</span></code>.</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="kr">function</span> <span class="nf">debugPrintHook</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">strAddr</span> <span class="o">=</span> <span class="n">memory</span><span class="p">.</span><span class="n">getregister</span><span class="p">(</span><span class="s2">&quot;arm9.r0&quot;</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">strAddr</span> <span class="o">~=</span> <span class="mi">0</span> <span class="kr">then</span>
        <span class="kd">local</span> <span class="n">str</span> <span class="o">=</span> <span class="n">getString</span><span class="p">(</span><span class="n">strAddr</span><span class="p">)</span>
        <span class="kr">if</span> <span class="n">str</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="kr">then</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
        <span class="kr">end</span>
    <span class="kr">end</span>
<span class="kr">end</span>
</pre></div>
</div>
</section>
<section id="memory-setregister-cpu-dot-registername-string-value">
<span id="setregister"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.setregister(cpu_dot_registername_string,</span> <span class="pre">value)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">cpu_dot_registername_string</span></code> is a string representing the register to write. The format is <code class="docutils literal notranslate"><span class="pre">&lt;CPU&gt;.&lt;register&gt;</span></code>, where <code class="docutils literal notranslate"><span class="pre">CPU</span></code> is “arm9” or “arm7” (or “main” or “sub”, respectively) and <code class="docutils literal notranslate"><span class="pre">register</span></code> is <code class="docutils literal notranslate"><span class="pre">r0</span></code>-<code class="docutils literal notranslate"><span class="pre">r15</span></code>, <code class="docutils literal notranslate"><span class="pre">cpsr</span></code> or <code class="docutils literal notranslate"><span class="pre">spsr</span></code>. <code class="docutils literal notranslate"><span class="pre">value</span></code> is the data to write to it, as an integer.</p>
<p>Writes <code class="docutils literal notranslate"><span class="pre">value</span></code> to the register referenced by <code class="docutils literal notranslate"><span class="pre">cpu_dot_registername_string</span></code>.</p>
</section>
<section id="memory-vram-readword-address">
<span id="vram-readword"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.vram_readword(address)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is the address of a word in the console’s VRAM address space.</p>
<p>Reads one word (16 bits) from VRAM address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-vram-writeword-address-value">
<span id="vram-writeword"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.vram_writeword(address,</span> <span class="pre">value)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is the address of a word in the console’s VRAM address space. <code class="docutils literal notranslate"><span class="pre">value</span></code> is the word to write there.</p>
<p>Writes one word (16 bits) to VRAM address <code class="docutils literal notranslate"><span class="pre">address</span></code>.</p>
</section>
<section id="memory-registerwrite-address-size-1-cpuname-main-func">
<span id="registerwrite"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.registerwrite(address[,</span> <span class="pre">size</span> <span class="pre">=</span> <span class="pre">1][,</span> <span class="pre">cpuname</span> <span class="pre">=</span> <span class="pre">&quot;main&quot;],</span> <span class="pre">func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing an address in the chosen CPU’s address space. <code class="docutils literal notranslate"><span class="pre">size</span></code> is an integer representing the length of the memory region that should be registered. <code class="docutils literal notranslate"><span class="pre">cpuname</span></code> is a string containing the name of the CPU to register to, with a value of either “main” or “sub” (or “arm9” or “arm7”, respectively). <code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking no arguments.</p>
<p>Registers a memory write watchpoint with size <code class="docutils literal notranslate"><span class="pre">size</span></code> at address <code class="docutils literal notranslate"><span class="pre">cpuname</span></code>:<code class="docutils literal notranslate"><span class="pre">address</span></code>. When <code class="docutils literal notranslate"><span class="pre">cpuname</span></code>:<code class="docutils literal notranslate"><span class="pre">address</span></code> is written, <code class="docutils literal notranslate"><span class="pre">func</span></code> will be called.</p>
<p>TODO: verify whether <code class="docutils literal notranslate"><span class="pre">size</span></code> and <code class="docutils literal notranslate"><span class="pre">cpuname</span></code> are used at all (they don’t seem to be).</p>
</section>
<section id="memory-registerread-address-size-1-cpuname-main-func">
<span id="registerread"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.registerread(address[,</span> <span class="pre">size</span> <span class="pre">=</span> <span class="pre">1][,</span> <span class="pre">cpuname</span> <span class="pre">=</span> <span class="pre">&quot;main&quot;],</span> <span class="pre">func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing an address in the chosen CPU’s address space. <code class="docutils literal notranslate"><span class="pre">size</span></code> is an integer representing the length of the memory region that should be registered. <code class="docutils literal notranslate"><span class="pre">cpuname</span></code> is a string containing the name of the CPU to register to, with a value of either “main” or “sub” (or “arm9” or “arm7”, respectively). <code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking no arguments.</p>
<p>Registers a memory read watchpoint with size <code class="docutils literal notranslate"><span class="pre">size</span></code> at address <code class="docutils literal notranslate"><span class="pre">cpuname</span></code>:<code class="docutils literal notranslate"><span class="pre">address</span></code>. When <code class="docutils literal notranslate"><span class="pre">cpuname</span></code>:<code class="docutils literal notranslate"><span class="pre">address</span></code> is read, <code class="docutils literal notranslate"><span class="pre">func</span></code> will be called.</p>
<p>TODO: verify whether <code class="docutils literal notranslate"><span class="pre">size</span></code> and <code class="docutils literal notranslate"><span class="pre">cpuname</span></code> are used at all (they don’t seem to be).</p>
</section>
<section id="memory-registerexec-address-size-2-cpuname-main-func">
<span id="registerexec"></span><h3><code class="docutils literal notranslate"><span class="pre">memory.registerexec(address[,</span> <span class="pre">size</span> <span class="pre">=</span> <span class="pre">2][,</span> <span class="pre">cpuname</span> <span class="pre">=</span> <span class="pre">&quot;main&quot;],</span> <span class="pre">func)</span></code></h3>
<p><code class="docutils literal notranslate"><span class="pre">address</span></code> is an integer representing the address of an instruction in the chosen CPU’s address space. <code class="docutils literal notranslate"><span class="pre">size</span></code> is an integer representing the length of the memory region that should be registered. <code class="docutils literal notranslate"><span class="pre">cpuname</span></code> is a string containing the name of the CPU to register to, with a value of either “main” or “sub” (or “arm9” or “arm7”, respectively). <code class="docutils literal notranslate"><span class="pre">func</span></code> is a function taking no arguments.</p>
<p>Registers a memory exec watchpoint with size <code class="docutils literal notranslate"><span class="pre">size</span></code> at address <code class="docutils literal notranslate"><span class="pre">cpuname</span></code>:<code class="docutils literal notranslate"><span class="pre">address</span></code>. When <code class="docutils literal notranslate"><span class="pre">cpuname</span></code>:<code class="docutils literal notranslate"><span class="pre">address</span></code> is executed, <code class="docutils literal notranslate"><span class="pre">func</span></code> will be called.</p>
<p>TODO: verify whether <code class="docutils literal notranslate"><span class="pre">size</span></code> and <code class="docutils literal notranslate"><span class="pre">cpuname</span></code> are used at all (they don’t seem to be).</p>
<p>Example:</p>
<div class="highlight-lua notranslate"><div class="highlight"><pre><span></span><span class="n">memory</span><span class="p">.</span><span class="n">registerexec</span><span class="p">(</span><span class="mh">0x02103ea8</span><span class="p">,</span> <span class="n">debugPrintHook</span><span class="p">)</span>
</pre></div>
</div>
</section>
</section>
<section id="joypad">
<span id="id6"></span><h2>joypad</h2>
</section>
<section id="input">
<span id="id7"></span><h2>input</h2>
</section>
<section id="movie">
<span id="id8"></span><h2>movie</h2>
</section>
<section id="sound">
<span id="id9"></span><h2>sound</h2>
</section>
<section id="bit">
<span id="id10"></span><h2>bit</h2>
</section>
<section id="agg">
<span id="id11"></span><h2>agg</h2>
</section>
<section id="controller">
<span id="id12"></span><h2>controller</h2>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>